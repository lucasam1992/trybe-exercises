//Por que testar?

//examples/calculaSituacao.js
function calculaSituacao(media) {
    if (media > 7) {
      return 'aprovado';
    }
  
    return 'reprovado';
  }
  
module.exports = calculaSituacao;

//Agora vamos testar essa fun√ß√£o de acordo com os comportamentos que ela deveria ter segundo a proposta, nesse caso precisamos garantir que:
//Se passado um valor menor que 7 , por exemplo 4 , a resposta deve ser "reprovado" ;
//Se passado um valor maior que 7 , por exemplo 9 , a resposta ser "aprovado" ;
//E, n√£o podemos esquecer do "OU", sendo assim, se passado 7 , a resposta deve ser "aprovado" ;


//Para validar esses cen√°rios que pensamos podemos escrever algumas chamadas a nossa fun√ß√£o:
const calculaSituacao = require('./examples/calculaSituacao');

console.log(calculaSituacao(4));
// console: reprovado

//Para ficar mais simples, poder√≠amos adicionar algumas mensagens para nos ajudar e tamb√©m j√° verificar se a resposta dada √© aquela que esperamos:
const calculaSituacao = require('./examples/calculaSituacao');

console.log('Quando a m√©dia for menor que 7, retorna "reprovado":');

const respostaCenario1 = calculaSituacao(4);
if (respostaCenario1 === 'reprovado') {
  console.log(`Ok üöÄ`);
} else {
  console.error('Resposta n√£o esperada üö®');
}
// console:
// Quando a m√©dia for menor que 7, retorna "reprovado":
// Ok üöÄ

console.log('Quando a m√©dia for maior que 7, retorna "aprovado":');

const respostaCenario2 = calculaSituacao(9);
if (respostaCenario2 === 'aprovado') {
  console.log(`Ok üöÄ`);
} else {
  console.error('Resposta n√£o esperada üö®');
}
// console:
// Quando a m√©dia for maior que 7, retorna "aprovado":
// Ok üöÄ

console.log('Quando a m√©dia for igual a 7, retorna "aprovado":');

const respostaCenario3 = calculaSituacao(7);
if (respostaCenario3 === 'aprovado') {
  console.log(`Ok üöÄ`);
} else {
  console.error('Resposta n√£o esperada üö®');
}
// console:
// Quando a m√©dia for igual a 7, retorna "aprovado":
// Resposta n√£o esperada üö®


//Testes automatizados

//Ferramentas
//Para implementar testes no back-end iremos utilizar a dupla mocha e chai . Apesar de serem duas ferramentas diferentes, elas se completam.

//Esses m√≥dulos s√≥ ser√£o utilizados em fase de desenvolvimento e n√£o ser√£o utilizados para executar nossa aplica√ß√£o quando ela for publicada

npm install -D mocha chai


//Tipos de teste

//existem algumas divis√µes arbitr√°rias que nos ajudam a pensar uma ordem de desenvolvimento de testes, sendo as mais comuns:

//Testes unit√°rios : Trabalham presumindo um escopo limitado a um pequeno fragmento do seu c√≥digo com intera√ß√£o m√≠nima entre recursos externos. Ex: Uma fun√ß√£o com um fim espec√≠fico, como uma fun√ß√£o que soma dois n√∫meros:

// ./funcoes/calculo/soma.js
// Aqui podemos escrever testes pensando somente o comportamento esperado para fun√ß√£o `soma`

const soma = (valorA, valorB) => valorA + valorB;

module.exports = soma;


//Testes de integra√ß√£o : Trabalham presumindo a jun√ß√£o de m√∫ltiplos escopos (que tecnicamente devem possuir, cada um, seus pr√≥prios testes) com intera√ß√µes entre eles. Ex: Uma fun√ß√£o de calculadora que usa fun√ß√µes menores que eu posso testar isoladamente/ de forma unit√°ria:

// ./funcoes/calculadora.js
// Aqui podemos escrever testes pensando o comportamento da fun√ß√£o `calculadora` que presume o bom comportamento das fun√ß√µes que integram ela: `soma`, `subtracao`, `multiplicacao`, `divisao`

const { soma, subtracao, multiplicacao, divisao } = require("./calculo");

const calculadora = (valorA, valorB, operacao) => {
  switch(operacao) {
    case "soma":
      soma(valorA, valorB);
      break;
    case "subtracao":
      subtracao(valorA, valorB);
      break;
    case "multiplicacao":
      multiplicacao(valorA, valorB);
      break;
    case "divisao":
      divisao(valorA, valorB);
      break;
    default:
      break;
  }
};

module.exports = calculadora;

// Esse contexto fica mais evidente, quando temos opera√ß√µes mais complexas nos nossos testes, como opera√ß√µes que envolvem leitura de arquivos e consultas no banco de dados para composi√ß√£o de informa√ß√µes

//Testes de Ponto-a-ponto : Chamados tamb√©m de Fim-a-fim (End-to-End; E2E) , esses testes pressup√µe um fluxo de intera√ß√£o completo com a aplica√ß√£o, de um ponto a outro: Aqui, poder√≠amos pensar uma API que utiliza 
//nossa calculadora (assim como diversas outras fun√ß√µes mais complexas) na hora de realizar uma opera√ß√£o de venda de produtos. Esse teste √© o mais completo pois pressup√µe que todos os demais testes est√£o ou ser√£o desenvolvidos (Pensando na pr√°tica do TDD que veremos mais adiante).
//Um exemplo pr√°tico disso, s√£o os avaliadores de projetos de front-end.

//no geral, existe sempre uma rela√ß√£o de escopo/intera√ß√£o que √© definida durante o desenvolvimento de testes e quanto maior o n√∫mero de escopos diferentes e situa√ß√µes de intera√ß√£o prevista dentro desses escopos, maior a coes√£o e a confiabilidade do seu projeto.


//Escrevendo testes
//O primeiro passo √© compreender, atrav√©s dos requisitos, a estrutura que desejamos ter e os comportamentos esperados. J√° desenvolvemos esses pensamentos anteriormente, retomando-os temos:
//recebe parametro m√©dia - responde aprovado ou reprovado

//Estruturando testes com o Mocha
//O mocha √© um framework de testes para JS, isso significa que ele nos ajuda a arquitetar os nossos testes, nos fornecendo a estrutura e interface para escrevermos os nossos testes.

//O mocha reserva as palavras describe e it
//describe permite adicionar uma descri√ß√£o para um teste especifico ou um grupo de testes
//it permite sinalizar exatamente o cenario de teste q estamos testando naquele ponto



//testando anteriormente
console.log('Quando a m√©dia for maior que 7, retorna "aprovado":');

//testando com mocha
describe('Quando a m√©dia for menor que 7', () => {
    //
});

//describe aceita dois par√¢metros: o primeiro √© a descri√ß√£o e o segundo uma fun√ß√£o para executar o cen√°rio de teste.


//Descrito nosso comportamento, vamos adicionar o que ser√° testado de fato, ou seja, o que √© esperado. Para isso, temos o it :
describe('Quando a m√©dia for menor que 7', () => {
    it('retorna "reprovado"', () => {
      //
    });
});

//Aferindo testes com o Chai

//fornece maneiras de dizermos o q queremos testar e enta√µ ele validar√° se o resultado condiz com o esperado

//Para de fato testar nossa fun√ß√£o precisamos cham√°-la passando o input desejado e ent√£o validar se a resposta √© aquela que esperamos.

//Essa valida√ß√£o √© o que chamamos de assertion , "asser√ß√£o" ou, em alguns casos, "afirma√ß√£o" . Para nos ajudar com essa tarefa temos o chai , que nos fornece diversos tipos de valida√ß√µes diferentes.

//expect - que significa de fato o que √© esperado
const resposta = calculaSituacao(4);

expect(resposta).equals('reprovado');

//cen√°rio de teste inteiro com mocha + chai :
const { expect } = require('chai');

const calculaSituacao = require('../examples/calculaSituacao');

describe('Quando a m√©dia for menor que 7', () => {
  it('retorna "reprovado"', () => {
    const resposta = calculaSituacao(4);

    expect(resposta).equals('reprovado');
  });
});

//Para tornar nosso teste ainda mais leg√≠vel e elegante, o chai nos fornece outros getters encade√°veis que possuem um papel puramente est√©tico. 
//Por exemplo o to e o be , que nos permite escrever nossa assertion da seguinte maneira:
//tests/calculaSituacao.js
const { expect } = require('chai');

const calculaSituacao = require('../examples/calculaSituacao');

describe('Quando a m√©dia for menor que 7', () => {
  it('retorna "reprovado"', () => {
    const resposta = calculaSituacao(4);

    expect(resposta).to.be.equals('reprovado');
  });
});


//Perceba que o to e o be n√£o alteraram em nada a valida√ß√£o realizada, por√©m, a leitura fica muito mais flu√≠da e natural, 
//√© como se estiv√©ssemos dito que nosso teste "espera a resposta ser igual a "reprovado".


//Executando o teste
npm init # Iniciando o npm

//Teste escrito, vamos ver como execut√°-lo. Como dito antes, o mocha √© o respons√°vel por executar nossos testes. Ele entender√° as palavras reservadas describe e it , assim como a estrutura do nosso teste.

//adicionar um novo script ao nosso package.json , que chama o mocha e informa um arquivo ou diret√≥rio de testes:
//package.json
{
    // ...
      "scripts": {
        "start": "node index.js",
        "test": "mocha tests"
      },
    // ...
}

//Dessa forma, n√£o precisamos instalar nada globalmente, e para executar nosso teste basta rodar em nosso terminal o script test , que ir√° executar =o comando mocha tests utilizando o m√≥dulo instalado:
npm run test
//ou
npm test


//Testando todos os cen√°rios

//Adicionando os demais comportamentos, temos:


//tests/calculaSituacao.js
const { expect } = require('chai');

const calculaSituacao = require('../examples/calculaSituacao');

describe('Quando a m√©dia for menor que 7', () => {
  it('retorna "reprovado"', () => {
    const resposta = calculaSituacao(4);

    expect(resposta).to.be.equals('reprovado');
  });
});

describe('Quando a m√©dia for maior que 7', () => {
  it('retorna "aprovado"', () => {
    const resposta = calculaSituacao(9);

    expect(resposta).to.be.equals('aprovado');
  });
});

describe('Quando a m√©dia for igual a 7', () => {
  it('retorna "aprovado"', () => {
    const resposta = calculaSituacao(7);

    expect(resposta).to.be.equals('aprovado');
  });
});

//ultimo cenario quebra, pois nao existe a condi√ß√£o 7 === 7


//TDD - Transformando requisitos em testes

//E se formos pelo caminho contr√°rio? Se antes de tentarmos implementar o c√≥digo j√° 
//come√ßarmos traduzindo as especifica√ß√µes em testes e ent√£o j√° desenvolver pensando neles?


// conceito de TDD (Test Driven Development), em tradu√ß√£o livre, Desenvolvimento Orientado a Testes . Esse metodologia √© bastante difundida e pode trazer muitos benef√≠cios para o desenvolvimento.

//Passo a passo para um TDD
//analisar o que vai ter no codigo: fun√ß√µes, modulos, inputs ...
//cria-se a estrutura principal: describe e it
//criar as asser√ß√µes 
//com os testes criados, inicia-se a cria√ß√£o do c√≥digo


//Um pouco mais de testes

//Outro exemplo:

//Escreveremos uma fun√ß√£o que l√™ o conte√∫do de um arquivo. Essa fun√ß√£o:

//Receber√° um par√¢metro com o nome do arquivo a ser lido. Esse arquivo dever√° estar na pasta io-files ;
//Caso o arquivo solicitado exista, responder√° uma string com o conte√∫do do arquivo;
//Caso o arquivo solicitado n√£o exista, dever√° responder null .

//Antes de mais nada, vamos criar um novo diret√≥rio raiz para receber o nosso pacote node e instalar nossas ferramentas de testes:
mkdir examples2

cd examples2

mkdir io-test && cd io-test # Criando e entrando no diret√≥rio do nosso projeto

npm init # Iniciando o npm

npm install --save-dev mocha chai # Instalando as ferramentas de testes


//io-test/package.json
{
    //
    "scripts": {
      "start": "node index.js",
      "test": "mocha test.js"
    },
    //
}


//Mocha

//vamos escrever nosso arquivo test.js . Come√ßaremos estruturando os requisitos em forma de testes com o mocha :
//io-test/test.js

describe('leArquivo', () => {
    describe('Quando o arquivo existe', () => {
      describe('a resposta', () => {
        it('√© uma string', () => {
          //
        });
  
        it('√© igual ao conte√∫do do arquivo', () => {
          //
        });
      });
    });
  
    describe('Quando o arquivo n√£o existe', () => {
      describe('a resposta', () => {
        it('√© igual a "null"', () => {
          //
        });
      });
    });
});


//Chai
//adicionar as asser√ß√µes com o chai:

//io-test/test.js
const { expect } = require('chai');

const leArquivo = require('./leArquivo');

const CONTEUDO_DO_ARQUIVO = 'VQV com TDD';

describe('leArquivo', () => {
  describe('Quando o arquivo existe', () => {
    describe('a resposta', () => {
      const resposta = leArquivo('arquivo.txt');

      it('√© uma string', () => {
        expect(resposta).to.be.a('string');
      });

      it('√© igual ao conte√∫do do arquivo', () => {
        expect(resposta).to.be.equals(CONTEUDO_DO_ARQUIVO);
      });
    });
  });

  describe('Quando o arquivo n√£o existe', () => {
    it('a resposta √© igual a "null"', () => {
      const resposta = leArquivo('arquivo_que_nao_existe.txt');

      expect(resposta).to.be.equal(null);
    });
  });
});

//Aqui utilizamos uma nova asser√ß√£o do chai , o a , que validar√° o "tipo" daquele retorno. Como se tiv√©ssemos escrito: "espera a resposta ser uma string" (ou expect response to be a string ).


//Para que o teste seja executado, precisamos criar o arquivo que ir√° conter a fun√ß√£o. Vamos come√ßar com uma fun√ß√£o vazia apenas para conseguir import√°-la no arquivo de teste:
//io-test/leArquivo.js
module.exports = () => {
    //
}


//Agora vamos rodar o teste e ver o resultado: NAO PASSOU NADA
npm test # 
ou 
npm run test



//io-test/leArquivo.js
const fs = require('fs');

function leArquivo(nomeDoArquivo) {
  try {
    const conteudoDoArquivo = fs.readFileSync(nomeDoArquivo, 'utf8');

    return conteudoDoArquivo;
  } catch (err) {
    return null;
  }
}

module.exports = leArquivo;



//Isolando nossos testes
//nossos testes n√£o devem realizar opera√ß√µes de IO ( input / output ), ou seja, n√£o devem acessar nem o disco, nem a rede.


//Sendo assim, ao escrever testes, ser√° muito comum precisarmos testar c√≥digos que fazem esse tipo de opera√ß√£o de integra√ß√£o , o que pode adicionar complexidade aos nossos testes.


//Vejamos o exemplo que estamos constru√≠ndo: para garantir nossos cen√°rios, precisar√≠amos, al√©m de criar o teste e realizar a chamada √† nossa fun√ß√£o leArquivo , preparar um arquivo para ser lido com o conte√∫do que esperamos ler.

//Sinon
//√© uma ferramenta que fornece fun√ß√µes para diversos tipos dos Test Doubles ou, numa tradu√ß√£o livre, Dubl√™s de Testes (remetendo aos dubl√™s de filmes).


//Stubs s√£o objetos que podemos utilizar para simular intera√ß√µes com depend√™ncias externas ao que estamos testando de fato (na literatura, √© comum referir-se ao sistema sendo testado como SUT , que significa System under Test).
// instala√ß√£o do Sinon:
npm install --save-dev sinon


//como podemos criar um stub para a fun√ß√£o de leitura do fs :
const fs = require('fs');
const sinon = require('sinon');

sinon.stub(fs, 'readFileSync')
.returns('Valor a ser retornado');

//Perceba que precisamos importar o m√≥dulo fs e, ent√£o, falamos para o sinon criar um stub para a fun√ß√£o readFileSync que retornar√° 'Valor a ser retornado' , conforme especificamos na chamada para returns .


//Vamos modificar nosso teste para utilizar o stub:
//io-test/test.js
const fs = require('fs');
const sinon = require('sinon');
const { expect } = require('chai');

const leArquivo = require('./leArquivo');

const CONTEUDO_DO_ARQUIVO = 'VQV com TDD';

sinon.stub(fs, 'readFileSync').returns(CONTEUDO_DO_ARQUIVO);

describe('leArquivo', () => {
  describe('Quando o arquivo existe', () => {
    describe('a resposta', () => {
      const resposta = leArquivo('arquivo.txt');

      it('√© uma string', () => {
        expect(resposta).to.be.a('string');
      });

      it('√© igual ao conte√∫do do arquivo', () => {
        expect(resposta).to.be.equals(CONTEUDO_DO_ARQUIVO);
      });
    });
  });

  describe('Quando o arquivo n√£o existe', () => {
    it('a resposta √© igual a "null"', () => {
      const resposta = leArquivo('arquivo_que_nao_existe.txt');

      expect(resposta).to.be.equal(null);
    });
  });
});

//os testes que esperavam o valor retornados pelo stub funcionaram
//Por√©m, onde o valor esperado era outro, o teste passou a quebrar.

//Isso aconteceu porque criamos um comportamento falso √∫nico para a fun√ß√£o, que √© aplicado para todos os testes. Entretanto, em cada situa√ß√£o √© esperado um valor diferente:
//Quando o arquivo passado existe √© esperado que ela retorne o valor;
//Quando o arquivo passado n√£o existe √© esperado um erro;

//usa-se fun√ß√µes before e after do mocha

//Vamos adicionar esse conceito ao nosso teste:
const fs = require('fs');
const sinon = require('sinon');
const { expect } = require('chai');

const leArquivo = require('./leArquivo');

const CONTEUDO_DO_ARQUIVO = 'VQV com TDD';

describe('leArquivo', () => {
  describe('Quando o arquivo existe', () => {
    before(() => {
      sinon.stub(fs, 'readFileSync').returns(CONTEUDO_DO_ARQUIVO);
    });

    after(() => {
      fs.readFileSync.restore();
    });

    describe('a resposta', () => {
      it('√© uma string', () => {
        const resposta = leArquivo('arquivo.txt');

        expect(resposta).to.be.a('string');
      });

      it('√© igual ao conte√∫do do arquivo', () => {
        const resposta = leArquivo('arquivo.txt');

        expect(resposta).to.be.equals(CONTEUDO_DO_ARQUIVO);
      });
    });
  });

  describe('Quando o arquivo n√£o existe', () => {
    before(() => {
      sinon
        .stub(fs, 'readFileSync')
        .throws(new Error('Arquivo n√£o encontrado'));
    });

    after(() => {
      fs.readFileSync.restore();
    });

    describe('a resposta', () => {
      it('√© igual a "null"', () => {
        const resposta = leArquivo('arquivo_que_nao_existe.txt');

        expect(resposta).to.be.equal(null);
      });
    });
  });
});

//Perceba que antes de cada cen√°rio de teste n√≥s alteramos o comportamento do m√©todo do fs criando um stub e, depois da execu√ß√£o do teste, utilizamos a fun√ß√£o restore() que o sinon atribui aos stubs para retornarmos o comportamento padr√£o daquela fun√ß√£o.






