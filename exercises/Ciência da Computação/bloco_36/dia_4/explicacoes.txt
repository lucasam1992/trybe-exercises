set não guarda valores e é um objeto mutável, então não é possível guardar sets dentro de um set . Para resolver isso, existe o frozenset .

Frozenset

são objetos idênticos a set , porém são imutáveis; uma vez instanciados, não é possível adicionar ou remover elementos e todos
os métodos que realizam essas duas operações estão indisponíveis no frozenset . Todos os demais métodos de set funcionam em um frozenset .
Para criar sets de set, o elemento de dentro precisa ser um frozenset .

Operações básicas

A classe Set oferece complexidade O(1) para as operações de inserção, remoção e consulta


Operações que envolvem outro conjunto

set.isdisjoint(other) : retorna True se o set não tem nenhum elemento em comum com other , ou seja, se a intersecção é vazia;

set.issubset(other) : verifica se set é um subconjunto de other , ou seja, se todo elemento de set está em other ;

set.issuperset(other): verifica se set é um superconjunto de other , ou seja, se todos os elementos de other estão em set .
A diferença de um superconjunto e de um subconjunto é que no superconjunto podem haver outros elementos, além dos elementos de other já presentes dentro de set .
Já no subconjunto não;

set == other: verifica se os conjuntos são iguais, ou seja, se todos os elementos de set estão em other e se todos os elementos de other estão em set .
Lembre-se que a ordem não importa. Não existe função dedicada para a comparação de igualdade.


Os métodos a seguir operam sobre dois ou mais conjuntos por vez:

set.union(others): retorna a união entre o set e todos os other passados;
set.intersection(others): retorna a intersecção entre set e todos os other passados;
set.difference(others): retorna a diferença entre set e todos os other passados;
set.symmetric_difference(others): retorna todos os elementos que estejam em um mas não estejam no outro conjunto (opera apenas sobre dois conjuntos).
