Tres principais padrões de projeto:
1 - Criacionais
2- Estruturais
3 - Comportamentais

Iterator
"Quantas aplicações no mundo precisam iterar sobre uma lista de elementos?" Certamente milhares,
 senão milhões, correto? Eventualmente se propôs uma forma padronizada de implementar a solução para 
 este problema, e tal proposta foi adotada, e este é o padrão de projeto conhecido como iterator 

 Ao garantir que sua classe possui um iterador , você garante que ela tem uma função next que vai
acessar o próximo elemento da sua lista.

O exemplo do iterator é um exemplo mais básico do que padrões de projeto são, mas ilustra bem
 o seu propósito: organizar seu código e raciocínio de formas eficazes, comprovadamente boas
  e (praticamente) universalmente aceitas.

Adapter
Ele permite converter a interface de uma classe em outra interface, esperada pelo cliente (isto é,
 o código que usa a nossa classe). O Adapter permite que interfaces incompatíveis trabalhem em conjunto
– o que, de outra forma, seria impossível.

Strategy
Em qualquer situação assim, onde você se imaginar fazendo um if para escolher qual algoritmo usar para
 fazer uma ação, você pode aplicar o padrão Strategy!

 Outros padrões de projetos:
 https://refactoring.guru/pt-br/design-patterns/

 Code Smells
 algo está errado, embora possa não parecer de imediato.

 Long Method : métodos grandes geralmente significam mais de uma responsabilidade em um mesmo trecho de código. Por isso, como regra geral, métodos não devem ser muito longos;

Large Class : classes grandes geralmente significam mais de uma responsabilidade. Por isso, como regra geral, classes não devem ser muito grandes;

Duplicate Code : códigos duplicados geralmente significam falta de abstração, ou seja, lógica repetida que poderia estar centralizada em uma única entidade compartilhada. 
Assim sendo, uma aplicação não deve ter trechos de código duplicados;

Dead Code : se um código não está mais sendo utilizado, porque ainda está lá?

Speculative Generality : quem nunca tentou adivinhar o futuro e tornou uma implementação mais complicada do que precisava? Essa aqui é extremamente comum de fazermos sem perceber!

Data Clumps
Ocorre quando um grupo de variáveis (como o endereço de entrega do exemplo que veremos abaixo) é passado junto como parâmetro em várias partes do programa.
É indicativo de que esses grupos devem ser transformados em suas próprias classes.

exemplo:
class User:

    def __init__(self, name, street, number, district):
        '''Você nunca vai passar a rua sem passar também o número e o bairro!'''
        self.name = name
        self.address_street = street
        self.address_number = number
        self.address_district = district

solução:
class Address:
    def __init__(self, street, number, district):
        '''As informações que nunca vem separadas são uma entidade separada agora.'''
        self.street = street
        self.number = number
        self.district = district

class User:
    def __init__(self, name, address):
        self.name = name
        self.address = address

SE as infos servirão apenas para leitura e nunca irão ser alteradas diretamente,
O Python possui uma função para isso: namedtuple

from collections import namedtuple

GeoPoint = namedtuple('GeoPoint', 'lat lon')
location = GeoPoint(-22.81711234090266, -47.069559317039655)
print(location.lat) # muito melhor do que location[0]

Middle Man
Se uma classe somente delega uma ação para outra, por que deveria existir? Corte o intermediário!

exemplo:
class Player:
    # ...

    def game(self, game_id):
        '''Busca um jogo da pessoa através do seu id'''
        return PlayerGame.query.filter(game_id=game_id, user_id=self.id).first()

    def tournaments(self, game_id):
        '''Aqui estamos buscando pelos jogos de uma pessoa para encontrar
        seus torneios.

        Ou seja, usamos o middle man PlayerGame para encontrar o torneio.
        O que além de adicionar complexidade de código, adiciona uma consulta
        extra ao banco de dados.
        '''
        return self.game(game_id).tournaments()


class PlayerGame:

    def tournaments(self):
        return Tournament.query.filter(game_id=self.game_id).all()


class Tournament:
    ...


# Código cliente
player = Player(id=1)
print(player.tournaments(1))

solução:
class Player:

    # ...

    def tournaments(self, game_id):
        '''Aqui removemos o middle man PlayerGame da consulta,
        fazendo-a diretamente em Tournament.

        Com isso simplificamos o nosso código e removemos uma consulta.
        '''
        return Tournament.query.filter(game_id=game_id, user_id=self.id).all()


class Tournament:
    ...


# Código cliente
player = Player(id=1)
print(player.tournaments(1))
